#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Ejemplo de uso de la clase ExcelConverter
Este script demuestra c√≥mo usar la clase para convertir Excel ‚Üî DataFrame
"""

from excel_converter import ExcelConverter
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import random


def crear_datos_ejemplo():
    """
    Crea un DataFrame de ejemplo para demostrar las funcionalidades.
    """
    print("üìä Creando datos de ejemplo...")
    
    # Generar datos de ejemplo
    np.random.seed(42)
    
    nombres = ['Juan', 'Mar√≠a', 'Pedro', 'Ana', 'Carlos', 'Laura', 'Miguel', 'Sof√≠a']
    ciudades = ['Madrid', 'Barcelona', 'Valencia', 'Sevilla', 'M√°laga', 'Bilbao']
    departamentos = ['Ventas', 'IT', 'RRHH', 'Finanzas', 'Marketing']
    
    n_registros = 50
    
    datos = {
        'ID': range(1, n_registros + 1),
        'Nombre': [random.choice(nombres) for _ in range(n_registros)],
        'Edad': np.random.randint(18, 65, n_registros),
        'Ciudad': [random.choice(ciudades) for _ in range(n_registros)],
        'Salario': np.random.uniform(25000, 80000, n_registros).round(2),
        'Departamento': [random.choice(departamentos) for _ in range(n_registros)],
        'Fecha_Contratacion': [datetime.now() - timedelta(days=random.randint(1, 1000)) 
                              for _ in range(n_registros)],
        'Activo': [random.choice([True, False]) for _ in range(n_registros)]
    }
    
    df = pd.DataFrame(datos)
    
    # Agregar algunos valores nulos para probar limpieza
    df.loc[random.sample(range(n_registros), 3), 'Salario'] = np.nan
    df.loc[random.sample(range(n_registros), 2), 'Ciudad'] = None
    
    return df


def ejemplo_conversion_basica():
    """
    Ejemplo b√°sico de conversi√≥n Excel ‚Üî DataFrame
    """
    print("\n" + "="*60)
    print("üîÑ EJEMPLO 1: CONVERSI√ìN B√ÅSICA")
    print("="*60)
    
    # Crear instancia del convertidor
    converter = ExcelConverter(verbose=True)
    
    # Crear datos de ejemplo
    df_ejemplo = crear_datos_ejemplo()
    
    # Exportar DataFrame a Excel
    ruta_salida = "datos_ejemplo_clase.xlsx"
    print(f"\nüì§ Exportando DataFrame a: {ruta_salida}")
    
    if converter.convertir_dataframe_a_excel(df_ejemplo, ruta_salida):
        print("‚úÖ Exportaci√≥n exitosa!")
        
        # Cargar el archivo Excel de vuelta
        print(f"\nüì• Cargando archivo Excel: {ruta_salida}")
        df_cargado = converter.convertir_excel_a_dataframe(ruta_salida, limpiar=True)
        
        # Mostrar informaci√≥n del DataFrame cargado
        converter.mostrar_informacion(df_cargado)
        
        # Verificar que los datos son iguales
        if df_ejemplo.equals(df_cargado):
            print("‚úÖ Los datos se mantuvieron id√©nticos durante la conversi√≥n")
        else:
            print("‚ö†Ô∏è  Los datos cambiaron durante la conversi√≥n")
    else:
        print("‚ùå Error en la exportaci√≥n")


def ejemplo_limpieza_avanzada():
    """
    Ejemplo de limpieza avanzada de datos
    """
    print("\n" + "="*60)
    print("üßπ EJEMPLO 2: LIMPIEZA AVANZADA")
    print("="*60)
    
    converter = ExcelConverter(verbose=True)
    
    # Crear datos con duplicados y valores nulos
    df_sucio = crear_datos_ejemplo()
    
    # Agregar filas duplicadas
    filas_duplicadas = df_sucio.iloc[:3].copy()
    df_sucio = pd.concat([df_sucio, filas_duplicadas], ignore_index=True)
    
    # Agregar columna completamente vac√≠a
    df_sucio['Columna_Vacia'] = None
    
    print(f"üìä DataFrame original: {df_sucio.shape[0]} filas, {df_sucio.shape[1]} columnas")
    print(f"üîç Valores nulos: {df_sucio.isnull().sum().sum()}")
    
    # Aplicar limpieza
    df_limpio = converter.limpiar_dataframe(df_sucio, 
                                           eliminar_duplicados=True,
                                           eliminar_columnas_vacias=True)
    
    print(f"\nüìä DataFrame limpio: {df_limpio.shape[0]} filas, {df_limpio.shape[1]} columnas")
    print(f"üîç Valores nulos: {df_limpio.isnull().sum().sum()}")


def ejemplo_estadisticas():
    """
    Ejemplo de obtenci√≥n de estad√≠sticas
    """
    print("\n" + "="*60)
    print("üìà EJEMPLO 3: ESTAD√çSTICAS")
    print("="*60)
    
    converter = ExcelConverter(verbose=True)
    
    # Crear datos de ejemplo
    df = crear_datos_ejemplo()
    
    # Obtener estad√≠sticas
    stats = converter.obtener_estadisticas(df)
    
    print("üìä Estad√≠sticas del DataFrame:")
    print(f"   Dimensiones: {stats['dimensiones']}")
    print(f"   Columnas: {len(stats['columnas'])}")
    print(f"   Memoria: {stats['memoria_mb']:.2f} MB")
    print(f"   Columnas num√©ricas: {len(stats['columnas_numericas'])}")
    print(f"   Columnas categ√≥ricas: {len(stats['columnas_categoricas'])}")
    
    print(f"\nüìã Tipos de datos:")
    for col, tipo in stats['tipos_datos'].items():
        print(f"   {col}: {tipo}")
    
    print(f"\n‚ö†Ô∏è  Valores nulos:")
    for col, nulos in stats['valores_nulos'].items():
        if nulos > 0:
            print(f"   {col}: {nulos}")


def ejemplo_uso_avanzado():
    """
    Ejemplo de uso avanzado con m√∫ltiples archivos
    """
    print("\n" + "="*60)
    print("üöÄ EJEMPLO 4: USO AVANZADO")
    print("="*60)
    
    converter = ExcelConverter(verbose=True)
    
    # Crear m√∫ltiples DataFrames
    df1 = crear_datos_ejemplo()
    df2 = crear_datos_ejemplo()
    df2['ID'] = range(51, 101)  # IDs diferentes
    
    # Exportar m√∫ltiples hojas a un solo archivo Excel
    ruta_multiple = "datos_multiple_hojas.xlsx"
    
    print(f"üì§ Exportando m√∫ltiples DataFrames a: {ruta_multiple}")
    
    # Exportar primera hoja
    if converter.exportar_excel(df1, ruta_multiple, sheet_name='Empleados_1'):
        print("‚úÖ Primera hoja exportada")
        
        # Exportar segunda hoja (usando pandas directamente para m√∫ltiples hojas)
        with pd.ExcelWriter(ruta_multiple, engine='openpyxl', mode='a') as writer:
            df2.to_excel(writer, sheet_name='Empleados_2', index=False)
        print("‚úÖ Segunda hoja exportada")
        
        # Cargar ambas hojas
        print(f"\nüì• Cargando hojas del archivo: {ruta_multiple}")
        
        df_cargado1 = converter.cargar_excel(ruta_multiple, sheet_name='Empleados_1')
        df_cargado2 = converter.cargar_excel(ruta_multiple, sheet_name='Empleados_2')
        
        print(f"üìä Hoja 1: {df_cargado1.shape[0]} filas")
        print(f"üìä Hoja 2: {df_cargado2.shape[0]} filas")


def ejemplo_manejo_errores():
    """
    Ejemplo de manejo de errores
    """
    print("\n" + "="*60)
    print("üõ°Ô∏è EJEMPLO 5: MANEJO DE ERRORES")
    print("="*60)
    
    converter = ExcelConverter(verbose=True)
    
    # Intentar cargar archivo que no existe
    print("üîç Probando carga de archivo inexistente...")
    try:
        df = converter.cargar_excel("archivo_inexistente.xlsx")
    except FileNotFoundError:
        print("‚úÖ Error manejado correctamente: Archivo no encontrado")
    
    # Intentar cargar archivo con extensi√≥n inv√°lida
    print("\nüîç Probando carga de archivo con extensi√≥n inv√°lida...")
    if not converter.validar_ruta_archivo("archivo.txt"):
        print("‚úÖ Validaci√≥n correcta: Extensi√≥n no v√°lida")
    
    # Intentar exportar a directorio sin permisos (simulado)
    print("\nüîç Probando exportaci√≥n...")
    df_ejemplo = crear_datos_ejemplo()
    if converter.exportar_excel(df_ejemplo, "datos_test.xlsx"):
        print("‚úÖ Exportaci√≥n exitosa")


def main():
    """
    Funci√≥n principal que ejecuta todos los ejemplos
    """
    print("üöÄ EJEMPLOS DE USO DE LA CLASE EXCELCONVERTER")
    print("="*60)
    
    try:
        # Ejecutar todos los ejemplos
        ejemplo_conversion_basica()
        ejemplo_limpieza_avanzada()
        ejemplo_estadisticas()
        ejemplo_uso_avanzado()
        ejemplo_manejo_errores()
        
        print("\n" + "="*60)
        print("üéâ TODOS LOS EJEMPLOS COMPLETADOS EXITOSAMENTE")
        print("="*60)
        print("üìÅ Archivos generados:")
        print("   - datos_ejemplo_clase.xlsx")
        print("   - datos_multiple_hojas.xlsx")
        print("   - datos_test.xlsx")
        
    except Exception as e:
        print(f"\n‚ùå Error durante la ejecuci√≥n: {str(e)}")


if __name__ == "__main__":
    main() 