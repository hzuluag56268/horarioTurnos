#!/usr/bin/env python3
"""
Script de Prueba - Sistema de Restricciones Externas
==================================================

Este script prueba que el sistema de restricciones externas funciona
correctamente con el generador principal.

Versi√≥n: 1.0
Fecha: 2025
"""

import sys
import traceback
from datetime import datetime

def test_importacion_configuracion():
    """Prueba que la configuraci√≥n se importa correctamente"""
    print("üîç PRUEBA 1: Importaci√≥n de Configuraci√≥n Externa")
    print("-" * 50)
    
    try:
        from config_restricciones import (
            RESTRICCIONES_EMPLEADOS,
            TURNOS_FECHAS_ESPECIFICAS,
            TURNOS_ESPECIALES,
            TRABAJADORES_FUERA_OPERACION,
            DIAS_FESTIVOS,
            CONFIGURACION_GENERAL,
            validar_configuracion,
            obtener_resumen_configuracion
        )
        
        print("‚úÖ Importaci√≥n exitosa de todos los componentes")
        
        # Validar configuraci√≥n
        errores = validar_configuracion()
        if errores:
            print(f"‚ùå {len(errores)} errores en configuraci√≥n:")
            for error in errores:
                print(f"   - {error}")
            return False
        else:
            print("‚úÖ Configuraci√≥n v√°lida")
        
        # Mostrar resumen
        resumen = obtener_resumen_configuracion()
        print("\nüìä RESUMEN DE CONFIGURACI√ìN:")
        for clave, valor in resumen.items():
            print(f"   {clave}: {valor}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en importaci√≥n: {e}")
        traceback.print_exc()
        return False

def test_generador_con_restricciones_externas():
    """Prueba que el generador funciona con restricciones externas"""
    print("\nüîç PRUEBA 2: Generador con Restricciones Externas")
    print("-" * 50)
    
    try:
        from generador_descansos_separacion import GeneradorDescansosSeparacion
        
        # Crear generador para semana 28 (semana de prueba)
        generador = GeneradorDescansosSeparacion(
            a√±o=2025,
            mes=7,
            num_empleados=24,
            semana_especifica=28
        )
        
        print("‚úÖ Generador creado exitosamente")
        
        # Verificar que las restricciones externas se cargaron
        print(f"üìã Empleados con restricciones: {len(generador.restricciones_empleados)}")
        print(f"üìÖ Empleados con fechas espec√≠ficas: {len(generador.turnos_fechas_especificas)}")
        print(f"üéØ Empleados con turnos especiales: {len(generador.turnos_especiales)}")
        print(f"üö´ Trabajadores fuera de operaci√≥n: {len(generador.trabajadores_fuera_operacion)}")
        print(f"üéâ D√≠as festivos configurados: {len(generador.dias_festivos)}")
        
        # Verificar configuraciones espec√≠ficas
        print("\nüîç VERIFICACI√ìN DE CONFIGURACIONES ESPEC√çFICAS:")
        
        # HZG debe tener restricciones
        if "HZG" in generador.restricciones_empleados:
            restriccion_hzg = generador.restricciones_empleados["HZG"]
            print(f"‚úÖ HZG tiene restricciones: {restriccion_hzg}")
        else:
            print("‚ùå HZG no tiene restricciones configuradas")
            return False
        
        # JIS debe tener vacaciones
        if "JIS" in generador.turnos_fechas_especificas:
            vacaciones_jis = len(generador.turnos_fechas_especificas["JIS"])
            print(f"‚úÖ JIS tiene {vacaciones_jis} d√≠as de vacaciones configurados")
        else:
            print("‚ùå JIS no tiene vacaciones configuradas")
            return False
        
        # GMT debe tener turno especial SIND
        if "GMT" in generador.turnos_especiales:
            turnos_gmt = generador.turnos_especiales["GMT"]
            print(f"‚úÖ GMT tiene turnos especiales: {turnos_gmt}")
        else:
            print("‚ùå GMT no tiene turnos especiales configurados")
            return False
        
        # PHD debe estar fuera de operaci√≥n
        if "PHD" in generador.trabajadores_fuera_operacion:
            print("‚úÖ PHD est√° correctamente fuera de operaci√≥n")
        else:
            print("‚ùå PHD no est√° fuera de operaci√≥n")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en generador: {e}")
        traceback.print_exc()
        return False

def test_generacion_horario():
    """Prueba que se puede generar un horario completo"""
    print("\nüîç PRUEBA 3: Generaci√≥n de Horario Completo")
    print("-" * 50)
    
    try:
        from generador_descansos_separacion import GeneradorDescansosSeparacion
        
        # Crear generador para semana 28
        generador = GeneradorDescansosSeparacion(
            a√±o=2025,
            mes=7,
            num_empleados=24,
            semana_especifica=28
        )
        
        print("üöÄ Iniciando generaci√≥n de horario...")
        
        # Generar horario
        df = generador.generar_horario_primera_semana()
        
        if df is not None and not df.empty:
            print(f"‚úÖ Horario generado exitosamente")
            print(f"üìä Dimensiones: {df.shape[0]} empleados x {df.shape[1]} columnas")
            
            # Verificar que las restricciones se aplicaron
            print("\nüîç VERIFICACI√ìN DE RESTRICCIONES APLICADAS:")
            
            # Verificar JIS tiene VACA
            if 'JIS' in df.index:
                fila_jis = df.loc['JIS']
                vaca_count = sum(1 for val in fila_jis if val == 'VACA')
                print(f"‚úÖ JIS tiene {vaca_count} d√≠as de VACA")
            
            # Verificar GMT tiene SIND
            if 'GMT' in df.index:
                fila_gmt = df.loc['GMT']
                sind_count = sum(1 for val in fila_gmt if val == 'SIND')
                print(f"‚úÖ GMT tiene {sind_count} d√≠as de SIND")
            
            # Verificar PHD no aparece (fuera de operaci√≥n)
            if 'PHD' not in df.index:
                print("‚úÖ PHD correctamente excluido (fuera de operaci√≥n)")
            else:
                print("‚ö†Ô∏è PHD aparece en el horario (deber√≠a estar fuera de operaci√≥n)")
            
            return True
        else:
            print("‚ùå No se pudo generar el horario")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en generaci√≥n de horario: {e}")
        traceback.print_exc()
        return False

def test_modificacion_dinamica():
    """Prueba modificaciones din√°micas de la configuraci√≥n"""
    print("\nüîç PRUEBA 4: Modificaci√≥n Din√°mica de Configuraci√≥n")
    print("-" * 50)
    
    try:
        from config_restricciones import (
            agregar_restriccion_empleado,
            agregar_fecha_especifica,
            agregar_turno_especial,
            RESTRICCIONES_EMPLEADOS,
            TURNOS_FECHAS_ESPECIFICAS,
            TURNOS_ESPECIALES
        )
        
        # Agregar nueva restricci√≥n
        print("üîß Agregando nueva restricci√≥n para empleado TEST...")
        agregar_restriccion_empleado("TEST", "DESC", ["lunes"], "fijo")
        
        if "TEST" in RESTRICCIONES_EMPLEADOS:
            print("‚úÖ Restricci√≥n agregada correctamente")
        else:
            print("‚ùå Error agregando restricci√≥n")
            return False
        
        # Agregar fecha espec√≠fica
        print("üîß Agregando fecha espec√≠fica para empleado TEST...")
        agregar_fecha_especifica("TEST", "2025-07-15", "DESC")
        
        if "TEST" in TURNOS_FECHAS_ESPECIFICAS:
            print("‚úÖ Fecha espec√≠fica agregada correctamente")
        else:
            print("‚ùå Error agregando fecha espec√≠fica")
            return False
        
        # Agregar turno especial
        print("üîß Agregando turno especial para empleado TEST...")
        agregar_turno_especial("TEST", "CERT", "semanal_fijo", "viernes")
        
        if "TEST" in TURNOS_ESPECIALES:
            print("‚úÖ Turno especial agregado correctamente")
        else:
            print("‚ùå Error agregando turno especial")
            return False
        
        # Limpiar las modificaciones de prueba
        if "TEST" in RESTRICCIONES_EMPLEADOS:
            del RESTRICCIONES_EMPLEADOS["TEST"]
        if "TEST" in TURNOS_FECHAS_ESPECIFICAS:
            del TURNOS_FECHAS_ESPECIFICAS["TEST"]
        if "TEST" in TURNOS_ESPECIALES:
            del TURNOS_ESPECIALES["TEST"]
        
        print("üßπ Modificaciones de prueba limpiadas")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en modificaci√≥n din√°mica: {e}")
        traceback.print_exc()
        return False

def main():
    """Funci√≥n principal de pruebas"""
    print("üß™ SISTEMA DE PRUEBAS - RESTRICCIONES EXTERNAS")
    print("=" * 60)
    print(f"üìÖ Fecha de ejecuci√≥n: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # Ejecutar todas las pruebas
    pruebas = [
        ("Importaci√≥n de Configuraci√≥n", test_importacion_configuracion),
        ("Generador con Restricciones Externas", test_generador_con_restricciones_externas),
        ("Generaci√≥n de Horario Completo", test_generacion_horario),
        ("Modificaci√≥n Din√°mica", test_modificacion_dinamica)
    ]
    
    resultados = []
    
    for nombre, funcion_prueba in pruebas:
        try:
            resultado = funcion_prueba()
            resultados.append((nombre, resultado))
        except Exception as e:
            print(f"‚ùå ERROR CR√çTICO en {nombre}: {e}")
            resultados.append((nombre, False))
    
    # Mostrar resumen final
    print("\n" + "=" * 60)
    print("üìä RESUMEN FINAL DE PRUEBAS")
    print("=" * 60)
    
    exitosas = 0
    fallidas = 0
    
    for nombre, resultado in resultados:
        if resultado:
            print(f"‚úÖ {nombre}")
            exitosas += 1
        else:
            print(f"‚ùå {nombre}")
            fallidas += 1
    
    print("-" * 60)
    print(f"üéØ TOTAL: {exitosas} exitosas, {fallidas} fallidas")
    
    if fallidas == 0:
        print("üéâ ¬°TODAS LAS PRUEBAS PASARON!")
        print("‚ú® El sistema de restricciones externas est√° funcionando correctamente")
        return 0
    else:
        print("‚ö†Ô∏è Algunas pruebas fallaron")
        print("üîß Revise los errores mostrados arriba")
        return 1

if __name__ == "__main__":
    sys.exit(main())